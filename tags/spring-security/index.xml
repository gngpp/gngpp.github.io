<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring Security on gngpp</title>
    <link>https://blog.innas.cn/tags/spring-security/</link>
    <description>Recent content in Spring Security on gngpp</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Aug 2021 11:39:34 +0000</lastBuildDate><atom:link href="https://blog.innas.cn/tags/spring-security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Spring Security 组件解析</title>
      <link>https://blog.innas.cn/posts/spring-security-%E7%BB%84%E4%BB%B6%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 02 Aug 2021 11:39:34 +0000</pubDate>
      
      <guid>https://blog.innas.cn/posts/spring-security-%E7%BB%84%E4%BB%B6%E8%A7%A3%E6%9E%90/</guid>
      <description>Spring Security 组件解析   Authentication （用户身份）
 在 spring security 里，用户身份在不同阶段有着不同的含义
 在校验开始时，用户身份代表用户输入的用户信息，比如账号、密码、验证码 在校验成功后，用户身份代表用户的真实信息，比如账号、密码、权限   Authentication 接口则是 security 提供的用户身份接口，实现类有常用的 UsernamePasswordAuthenticationToken, 这个接口其包含的最基本的信息如下
  authorities
用户身份所拥有的所有权限
  principal
其代表用户的唯一标识，在校验开始阶段其表示账号 ，在校验成功后其表示 UserDetails 也就是用户细节
  credentials
其代表用户凭证，通常是密码
  details
其代表细节部分, 默认是SessionID和IP， 当然如果要做成验证码, 这里我们也可以自定义
     AuthenticationManager (验证器管理器)
 验证器管理器的作用仅仅时用来管理验证器而已，真正的验证功能还是靠验证器来实现
该管理器的默认实现类是 ProviderManager
其主要负责管理以下组件:
  AuthenticationEventPublisher
验证事件公开者，当验证成功或者失败，其会将此类事件公开，如果我们设置了对应事件的 Handler 那我们就可以监听该类事件，比如说登录成功事件 或 登录失败事件
  AuthenticationProvider
身份校验器提供者，也就是身份校验器，用于校验用户身份
  这个管理器还有一个 parent 字段，意味其类似于一个链表，和 spring beanFactory 有点相似</description>
    </item>
    
  </channel>
</rss>
