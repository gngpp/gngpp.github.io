{"meta":{"title":"Blog","subtitle":null,"description":null,"author":"gngpp","url":"https://gngpp.github.io","root":"/"},"posts":[{"title":"Arm64-Proxmox-BUG","date":"2022-11-26T16:01:00.000Z","path":"2022/11/26/proxmox-bug/","link":"","permalink":"https://gngpp.github.io/2022/11/26/proxmox-bug/","excerpt":"处理Arm64平台Proxmox一些bug，关于网桥设备无法获取正常DHCP服务 /etc/sysctl.conf 12345net.bridge.bridge-nf-call-ip6tables = 0net.bridge.bridge-nf-call-iptables = 0net.bridge.bridge-nf-call-arptables = 0net.ipv4.tcp_congestion_control = bbrnet.core.default_qdisc = fq","categories":[],"tags":[{"name":"Proxmox","slug":"Proxmox","permalink":"https://gngpp.github.io/tags/Proxmox/"}]},{"title":"FriendlyWrt-R6S","date":"2022-11-18T15:11:43.000Z","path":"2022/11/18/FriendlyWrt-R6S/","link":"","permalink":"https://gngpp.github.io/2022/11/18/FriendlyWrt-R6S/","excerpt":"","categories":[],"tags":[{"name":"OpenWrt","slug":"OpenWrt","permalink":"https://gngpp.github.io/tags/OpenWrt/"},{"name":"R6S","slug":"R6S","permalink":"https://gngpp.github.io/tags/R6S/"}]},{"title":"Drive Intel AX201 in OpenWrt","date":"2022-11-12T07:34:24.000Z","path":"2022/11/12/OpenWrt-AX201/","link":"","permalink":"https://gngpp.github.io/2022/11/12/OpenWrt-AX201/","excerpt":"","categories":[],"tags":[{"name":"OpenWrt","slug":"OpenWrt","permalink":"https://gngpp.github.io/tags/OpenWrt/"},{"name":"AX201","slug":"AX201","permalink":"https://gngpp.github.io/tags/AX201/"},{"name":"Intel","slug":"Intel","permalink":"https://gngpp.github.io/tags/Intel/"}]},{"title":"OrangePi Zero2","date":"2022-11-10T01:36:35.000Z","path":"2022/11/10/OrangePi-Zero2/","link":"","permalink":"https://gngpp.github.io/2022/11/10/OrangePi-Zero2/","excerpt":"","categories":[],"tags":[{"name":"OpenWrt","slug":"OpenWrt","permalink":"https://gngpp.github.io/tags/OpenWrt/"},{"name":"Docker","slug":"Docker","permalink":"https://gngpp.github.io/tags/Docker/"},{"name":"OrangePi Zero2","slug":"OrangePi-Zero2","permalink":"https://gngpp.github.io/tags/OrangePi-Zero2/"}]},{"title":"Linux、rtl8821CU芯片网卡AP模式满速配置","date":"2022-07-13T19:19:33.000Z","path":"2022/07/13/rtl8821cu/","link":"","permalink":"https://gngpp.github.io/2022/07/13/rtl8821cu/","excerpt":"本文讲述配置rtl8821CU驱动芯片网卡AP模式连接达到433Mbps协商速度和80Hz频宽。 配置hostapd 12touch /etc/hostapd/hostapd.conftouch /etc/modprobe.d/rtl8821cu.conf","categories":[{"name":"PVE","slug":"PVE","permalink":"https://gngpp.github.io/categories/PVE/"}],"tags":[{"name":"rtl8821CU","slug":"rtl8821CU","permalink":"https://gngpp.github.io/tags/rtl8821CU/"}]},{"title":"macOS关闭mds_stores进程","date":"2022-04-25T03:39:34.000Z","path":"2022/04/25/mds_stores/","link":"","permalink":"https://gngpp.github.io/2022/04/25/mds_stores/","excerpt":"macOS升级了最新版Monterey，发现每次开机都会有这么一个进程mds在重建index索引缓存，消耗大量cpu，导致风扇起飞，但使用中并没有感觉到有什么用，直接关闭即可。 command 1sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist","categories":[{"name":"macOS","slug":"macOS","permalink":"https://gngpp.github.io/categories/macOS/"}],"tags":[{"name":"macOS","slug":"macOS","permalink":"https://gngpp.github.io/tags/macOS/"}]},{"title":"Linux发行版设置OpenWrt网易云音乐解锁参数","date":"2022-03-29T16:38:29.000Z","path":"2022/03/29/config/Linux设置OpenWrt 网易云解锁/","link":"","permalink":"https://gngpp.github.io/2022/03/29/config/Linux%E8%AE%BE%E7%BD%AEOpenWrt%20%E7%BD%91%E6%98%93%E4%BA%91%E8%A7%A3%E9%94%81/","excerpt":"Linux 客户端 (1.2 版本以上需要自签证书 MITM，启动客户端需要增加 –ignore-certificate-errors 参数) 1sudo vi /usr/share/applications/netease-cloud-music.desktop 在Exec行末尾增加--ignore-certificate-errors参数","categories":[{"name":"配置","slug":"配置","permalink":"https://gngpp.github.io/categories/%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://gngpp.github.io/tags/linux/"}]},{"title":"Proxmox VE使用Wi-Fi网卡联网","date":"2022-02-14T16:55:42.000Z","path":"2022/02/14/proxmox/PVE使用WIFI网卡联网/","link":"","permalink":"https://gngpp.github.io/2022/02/14/proxmox/PVE%E4%BD%BF%E7%94%A8WIFI%E7%BD%91%E5%8D%A1%E8%81%94%E7%BD%91/","excerpt":"打开终端 vim编辑文件/etc/network/interfaces 1vim /etc/network/interfaces 添加以下内容 wlan0是网卡的标识名称，可以用ifconfig命令查看","categories":[{"name":"Proxmox VE","slug":"Proxmox-VE","permalink":"https://gngpp.github.io/categories/Proxmox-VE/"}],"tags":[{"name":"Wi-Fi","slug":"Wi-Fi","permalink":"https://gngpp.github.io/tags/Wi-Fi/"}]},{"title":"Docker创建网络错误提示","date":"2022-02-08T13:04:22.000Z","path":"2022/02/08/docker/Docker创建网络错误提示/","link":"","permalink":"https://gngpp.github.io/2022/02/08/docker/Docker%E5%88%9B%E5%BB%BA%E7%BD%91%E7%BB%9C%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BA/","excerpt":"插的USB网口给Docker网心云用，由于网络测试原因多次删除和创建macvlan网络，遇到了以下坑，重启docker并不能解决。 1234$ docker network create -d macvlan --subnet=192.168.3.0/24 --gateway=192.168.3.1 -o parent=enx00e04c680011 macvlan_net...Error response from daemon: network dm-04589cecfc96 is already using parent interface enx00e04c680011 解决参考，删除以下文件并重启docker","categories":[{"name":"Docker","slug":"Docker","permalink":"https://gngpp.github.io/categories/Docker/"}],"tags":[{"name":"docker、network","slug":"docker、network","permalink":"https://gngpp.github.io/tags/docker%E3%80%81network/"}]},{"title":"Proxmox VE、Docker macvlan网心云多开方案","date":"2022-02-02T09:54:00.000Z","path":"2022/02/02/proxmox/PVE、Docker网心云多开方案/","link":"","permalink":"https://gngpp.github.io/2022/02/02/proxmox/PVE%E3%80%81Docker%E7%BD%91%E5%BF%83%E4%BA%91%E5%A4%9A%E5%BC%80%E6%96%B9%E6%A1%88/","excerpt":"最近折腾网络，闲置宽带打算用闲置公网宽带来挂网心云来回本电费。简单讲，网心云群晖什么的搞桥接多开（我没有群晖），或者直接单开，都稍微有点麻烦了。为什么不用x86镜像？肯定是麻烦啊，docker稍微方便点。或许你可以用Proxmox VE LXC模版方案套娃来跑docker网心云，但是经过我的测试，没有办法做到。 当然可能有人做到了，说明我菜。 Docker跑网心云目前玩过的几种方式","categories":[{"name":"Proxmox VE","slug":"Proxmox-VE","permalink":"https://gngpp.github.io/categories/Proxmox-VE/"}],"tags":[{"name":"网心云、docker","slug":"网心云、docker","permalink":"https://gngpp.github.io/tags/%E7%BD%91%E5%BF%83%E4%BA%91%E3%80%81docker/"}]},{"title":"破解烽火HG2543C1光猫","date":"2022-01-26T03:55:42.000Z","path":"2022/01/26/proxmox/破解烽火HG2543C1光猫/","link":"","permalink":"https://gngpp.github.io/2022/01/26/proxmox/%E7%A0%B4%E8%A7%A3%E7%83%BD%E7%81%ABHG2543C1%E5%85%89%E7%8C%AB/","excerpt":"在Proxmox VE中搭建ikuai/openwrt软路由，闲置公网宽带。为了更好利用这个公网，决定把光猫破解改桥接。(超级密码拉网的师傅一般是不会告诉你的) 破解烽火HG2543C1光猫 打开光猫telnet功能 别问为什么不用ssh，浏览器访问：http://192.168.1.1:8080/cgi-bin/telnetenable.cgi?telnetenable=1 打开后会有telnet开启提示字样","categories":[{"name":"Proxmox VE","slug":"Proxmox-VE","permalink":"https://gngpp.github.io/categories/Proxmox-VE/"}],"tags":[{"name":"烽火HG2543C1光猫","slug":"烽火HG2543C1光猫","permalink":"https://gngpp.github.io/tags/%E7%83%BD%E7%81%ABHG2543C1%E5%85%89%E7%8C%AB/"}]},{"title":"docker-compose基本使用","date":"2021-11-08T03:39:52.000Z","path":"2021/11/08/docker/docker-compose基本使用/","link":"","permalink":"https://gngpp.github.io/2021/11/08/docker/docker-compose%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","excerpt":"前言 docker-compose工作做的就是容器编排，说白了就是自动化部署容器的工作，其中可以利用Dockerfile构建自定义容器打包部署，也可以利用现有的仓库镜像进行部署。 docker- compose常用命令","categories":[{"name":"Docker","slug":"Docker","permalink":"https://gngpp.github.io/categories/Docker/"}],"tags":[{"name":"docker-compose","slug":"docker-compose","permalink":"https://gngpp.github.io/tags/docker-compose/"}]},{"title":"Gradle Dependencies Cache CI/CD场景","date":"2021-11-05T10:56:17.000Z","path":"2021/11/05/CI-CD/Gradle缓存依赖使用场景/","link":"","permalink":"https://gngpp.github.io/2021/11/05/CI-CD/Gradle%E7%BC%93%E5%AD%98%E4%BE%9D%E8%B5%96%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/","excerpt":"Gradle是当下最流行的构建工具，下面讲CI/CD场景 Gradle构建可以指定本地maven仓库和远程仓库地址，根据配置优先策略寻找构建所需依赖。 但从远程下载但jar并不是存储在本地maven仓库，而是缓存在目录：~/.gradle/caches/modules-2/files-2.1（一般情况）, Docker Gradle Image默认缓存目录：/home/gradle/.gradle/caches/modules-2/files-2.1 还有就是caches Copy别到的主机上是不能够直接使用的，有验证策略，这里不过多赘述 Gradle构建的依赖来源于~/.gradle/caches/modules-2/files-2.1 &gt; 本地maven仓库 &gt; 远程仓库（优先级从左到右）","categories":[{"name":"CI/CD","slug":"CI-CD","permalink":"https://gngpp.github.io/categories/CI-CD/"}],"tags":[{"name":"Gradle","slug":"Gradle","permalink":"https://gngpp.github.io/tags/Gradle/"}]},{"title":"踩坑","date":"2021-10-27T10:32:47.000Z","path":"2021/10/27/记录遇到的坑/问题/","link":"","permalink":"https://gngpp.github.io/2021/10/27/%E8%AE%B0%E5%BD%95%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/%E9%97%AE%E9%A2%98/","excerpt":"","categories":[{"name":"开发的坑","slug":"开发的坑","permalink":"https://gngpp.github.io/categories/%E5%BC%80%E5%8F%91%E7%9A%84%E5%9D%91/"}],"tags":[]},{"title":"Debian安装code-server","date":"2021-09-14T14:20:09.000Z","path":"2021/09/14/开发环境搭建/Debian安装code-server/","link":"","permalink":"https://gngpp.github.io/2021/09/14/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/Debian%E5%AE%89%E8%A3%85code-server/","excerpt":"拉取安装包 Release地址：https://github.com/cdr/code-server/releases 12345678# 这里使用了加速镜像curl -fOL https://github.91chifun.workers.dev/https://github.com//cdr/code-server/releases/download/v3.11.1/code-server_3.11.1_amd64.deb# 解压安装sudo dpkg -i code-server_3.11.1_amd64.deb# 随系统启动sudo systemctl enable --now code-server@$USER# 重启服务，我这里用户名是rootsystemctl restart code-server@root.service 编辑配置","categories":[{"name":"配置","slug":"配置","permalink":"https://gngpp.github.io/categories/%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"配置","slug":"配置","permalink":"https://gngpp.github.io/tags/%E9%85%8D%E7%BD%AE/"}]},{"title":"项目打包Docker镜像遇到默认ANSI-X3-4-1968编码的坑","date":"2021-08-16T11:44:06.000Z","path":"2021/08/16/记录遇到的坑/项目构建Docker镜像遇到默认ANSI-X3-4-1968编码问题/","link":"","permalink":"https://gngpp.github.io/2021/08/16/%E8%AE%B0%E5%BD%95%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BADocker%E9%95%9C%E5%83%8F%E9%81%87%E5%88%B0%E9%BB%98%E8%AE%A4ANSI-X3-4-1968%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/","excerpt":"笔者在一次做项目的Runtime环境，自制精简Jre Docker image过程中替换base镜像遇到到编码问题 Dockerfile文件","categories":[{"name":"开发的坑","slug":"开发的坑","permalink":"https://gngpp.github.io/categories/%E5%BC%80%E5%8F%91%E7%9A%84%E5%9D%91/"}],"tags":[{"name":"Docker Build","slug":"Docker-Build","permalink":"https://gngpp.github.io/tags/Docker-Build/"}]},{"title":"Gradle项目打包Jar插件简单使用","date":"2021-08-04T16:38:29.000Z","path":"2021/08/04/config/Gradle项目打包Jar插件简单使用/","link":"","permalink":"https://gngpp.github.io/2021/08/04/config/Gradle%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85Jar%E6%8F%92%E4%BB%B6%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/","excerpt":"笔者在折腾自己的普通Java项目打包（并非Spring项目） 从6.x升级了Gradle7.0版本，下面这种打包方式似乎已经不支持了（暂时没研究api是否已经变化） 12345678910111213jar &#123; manifest &#123; attributes( &quot;Manifest-Version&quot;: 1.0, &#x27;Main-Class&#x27;:&#x27;com.gngpp.ddns.Application&#x27; ) &#125; from &#123; configurations.compile.collect &#123; it.isDirectory() ? it : zipTree(it) &#125; &#125; into(&#x27;assets&#x27;) &#123; from &#x27;assets&#x27; &#125;&#125; 时间关系懒得折腾，经测试使用shadow插件能解决大部分Java项目打包","categories":[{"name":"配置","slug":"配置","permalink":"https://gngpp.github.io/categories/%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Gradle","slug":"Gradle","permalink":"https://gngpp.github.io/tags/Gradle/"}]},{"title":"解决Hexo博客新版本Next主题不支持auto_excerpt配置问题","date":"2021-08-02T13:07:01.000Z","path":"2021/08/02/hexo/解决Hexo博客新版本Next主题不支持auto-excerpt配置问题/","link":"","permalink":"https://gngpp.github.io/2021/08/02/hexo/%E8%A7%A3%E5%86%B3Hexo%E5%8D%9A%E5%AE%A2%E6%96%B0%E7%89%88%E6%9C%ACNext%E4%B8%BB%E9%A2%98%E4%B8%8D%E6%94%AF%E6%8C%81auto-excerpt%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/","excerpt":"使用npm安装hexo-excerpt npm install hexo-excerpt --save 在站点配置文件中添加","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://gngpp.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://gngpp.github.io/tags/Hexo/"}]},{"title":"Hexo主题nexT显示错误解决","date":"2021-08-02T06:53:56.000Z","path":"2021/08/02/hexo/Hexo主题next显示错误解决/","link":"","permalink":"https://gngpp.github.io/2021/08/02/hexo/Hexo%E4%B8%BB%E9%A2%98next%E6%98%BE%E7%A4%BA%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/","excerpt":"","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://gngpp.github.io/categories/Hexo/"}],"tags":[{"name":"nexT","slug":"nexT","permalink":"https://gngpp.github.io/tags/nexT/"}]},{"title":"Linux后台运行hexo","date":"2021-08-02T04:44:38.000Z","path":"2021/08/02/hexo/Linux后台运行hexo/","link":"","permalink":"https://gngpp.github.io/2021/08/02/hexo/Linux%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8Chexo/","excerpt":"hexo是一个非常高效的博客，但由于其设计特点，目的是为了转换为静态页面， 因此不必要一直在后台运行，但是我想随时随地写博客同步到github， 使用hexo admin编辑器，这就需要hexo一直在后台运行，于是在网上找到了pm2托管的方式。 安装pm2 npm install -g pm2","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://gngpp.github.io/categories/Hexo/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://gngpp.github.io/tags/Linux/"}]},{"title":"DB程序员","date":"2021-08-02T03:41:35.000Z","path":"2021/08/02/项目注意点/","link":"","permalink":"https://gngpp.github.io/2021/08/02/%E9%A1%B9%E7%9B%AE%E6%B3%A8%E6%84%8F%E7%82%B9/","excerpt":"","categories":[],"tags":[{"name":"DB","slug":"DB","permalink":"https://gngpp.github.io/tags/DB/"}]},{"title":"Stream用法","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/Stream用法/","link":"","permalink":"https://gngpp.github.io/2021/08/02/Stream%E7%94%A8%E6%B3%95/","excerpt":"Stream 如何工作 stream 包含中间和最终两种形式的操作 中间操作（intermediate operations) 对于中间操作来说，其返回值还是一个stream，因此可以通过链式调用将中间操作串联起来。 中间操作又分为两种状态： 无状态 (Stateless) 无状态操作：是指元素的处理不受之前元素的影响 unordered filter 过滤符合断言的元素 map 将元素映射为其它类型 mapToInt 将元素映射为 Integer 类型` mapToLong 将元素映射为 Long mapToDouble 将元素映射为 Double flatMap 用于将N维列表，压缩成一维列表, 一个 flatMap只能降一个维度（可多次调用） flatMapToInt 和 flatMap一致，只是将元素转换为 Integer 类型输出 flatMapToLong 同上 flatMapToDouble 同上 peek 调试 有状态 (Stateful) 有状态操作：是指该操作只有拿到所有元素之后才能继续下去 distinct 去重 sorted 排序 limit 返回前 n 个元素 skip 跳过/丢掉前 n 个元素 最终操作 (terminal operation) 对于最终操作来说，只能返回 void 或者一个非 stream 的结果 最终操作又分为两种操作： 非短路操作 非短路操作：是指必须处理所有元素才能得到最终结果 forEach 单线程的时候是顺序执行，多线程的时候是乱序执行 forEachOrdered 单线程和多线程都是顺序操作 toArray 转换为数组 reduce 计算 collect 收集器 max 根据比较条件查找最大元素 min 根据比较条件查找最小元素 count 计算元素个数 短路操作 短路操作：是指遇到某些符合条件的元素就可以得到最终结果 anyMatch 任意一个元素满足断言才返回 true allMatch 所有的元素都必须满足断言才返回 true ，流为空时返回 true noneMatch 所有的元素都不满足断言才返回 true findFirst 返回流中的第一个元素，或者空，返回类型为 Optional findAny","categories":[{"name":"CRUD","slug":"CRUD","permalink":"https://gngpp.github.io/categories/CRUD/"}],"tags":[{"name":"Stream","slug":"Stream","permalink":"https://gngpp.github.io/tags/Stream/"}]},{"title":"Spring Security 组件解析","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/spring security 组件解析/","link":"","permalink":"https://gngpp.github.io/2021/08/02/spring%20security%20%E7%BB%84%E4%BB%B6%E8%A7%A3%E6%9E%90/","excerpt":"","categories":[{"name":"Spring Security","slug":"Spring-Security","permalink":"https://gngpp.github.io/categories/Spring-Security/"}],"tags":[{"name":"Spring Security","slug":"Spring-Security","permalink":"https://gngpp.github.io/tags/Spring-Security/"}]},{"title":"Elasticsearch 安装配置","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/elasticsearch/1.安装配置/","link":"","permalink":"https://gngpp.github.io/2021/08/02/elasticsearch/1.%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/","excerpt":"elasticsearch 安装配置 12brew install elastic/tap/elasticsearch-fullbrew install elastic/tap/kibana-full elasticsearch 默认地址和端口号 http://localhost:9200/?pretty","categories":[{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"https://gngpp.github.io/categories/Elasticsearch/"}],"tags":[{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"https://gngpp.github.io/tags/Elasticsearch/"}]},{"title":"Elasticsearch利用kibana进行可视化操作","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/elasticsearch/利用kibana进行可视化操作/","link":"","permalink":"https://gngpp.github.io/2021/08/02/elasticsearch/%E5%88%A9%E7%94%A8kibana%E8%BF%9B%E8%A1%8C%E5%8F%AF%E8%A7%86%E5%8C%96%E6%93%8D%E4%BD%9C/","excerpt":"利用kibana进行可视化操作 基本命令 查看elasticsearch的状态 GET /_cat/health?v 查看elasticsearch的索引 GET /_cat/indices?v 添加索引 PUT indexName 删除索引 DELETE indexName","categories":[{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"https://gngpp.github.io/categories/Elasticsearch/"}],"tags":[{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"https://gngpp.github.io/tags/Elasticsearch/"}]},{"title":"ReentrantLock","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/jdk/ReentrantLock/","link":"","permalink":"https://gngpp.github.io/2021/08/02/jdk/ReentrantLock/","excerpt":"前言 ReentrantLock作为 AQS的实现类之一，其是基于 CAS实现的锁，此锁为独占锁，并且用一个阻塞队列来阻塞前来拿锁的线程。队列为CLH 队列 其使用两种策略，一种是非公平，一种是公平，默认是 非公平锁。在这里先讨论非公平锁","categories":[{"name":"ReentrantLock","slug":"ReentrantLock","permalink":"https://gngpp.github.io/categories/ReentrantLock/"}],"tags":[{"name":"ReentrantLock","slug":"ReentrantLock","permalink":"https://gngpp.github.io/tags/ReentrantLock/"}]},{"title":"Nginx在Docker中自动反向代理","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/nginx/nginx在docker中自动反向代理/","link":"","permalink":"https://gngpp.github.io/2021/08/02/nginx/nginx%E5%9C%A8docker%E4%B8%AD%E8%87%AA%E5%8A%A8%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/","excerpt":"nginx在docker中自动反向代理 http://jasonwilder.com/blog/2014/03/25/automated-nginx-reverse-proxy-for-docker/ 一个反向代理服务器通常在其它服务器的前面，用以提供额外web服务器自身不能提供的功能。比如说，一个反向代理服务器可以提供SSL终端、负载均衡、路由请求、缓存、压缩或A/B测试。当我们运行web服务在docker容器中时，nginx可以运行在容器的前面，这对于简单部署来说很有用。","categories":[{"name":"Nginx","slug":"Nginx","permalink":"https://gngpp.github.io/categories/Nginx/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://gngpp.github.io/tags/Nginx/"}]},{"title":"Nginx的安装","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/nginx/nginx安装/","link":"","permalink":"https://gngpp.github.io/2021/08/02/nginx/nginx%E5%AE%89%E8%A3%85/","excerpt":"nginx的安装 1. 使用brew 安装 1brew install nginx","categories":[{"name":"Nginx","slug":"Nginx","permalink":"https://gngpp.github.io/categories/Nginx/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://gngpp.github.io/tags/Nginx/"}]},{"title":"Nginx的使用","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/nginx/nginx的使用/","link":"","permalink":"https://gngpp.github.io/2021/08/02/nginx/nginx%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"nginx 的使用 1. 停止运行 12345678&#x27;方法1: 使用 -s 发送指令 -s means signal 记得带上你的配置，否则它就会从默认配置中读取pid&#x27;sudo nginx -s stop -c /etc/nginx/nginx.conf&#x27;方法2: 使用系统命令，nginx会在运行的时候创建一个pid文件，文件里面有nginx的pid&#x27;&#x27;后面这个路径可以修改的，讲配置文件的时候会讲&#x27;sudo kill -QUIT $( cat /usr/local/nginx/logs/nginx.pid )&#x27;下面这个是我常用的&#x27;sudo kill -QUIT $( cat /etc/nginx/logs/nginx.pid)","categories":[{"name":"Nginx","slug":"Nginx","permalink":"https://gngpp.github.io/categories/Nginx/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://gngpp.github.io/tags/Nginx/"}]},{"title":"配置Nginx反向代理服务器","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/nginx/nginx配置/","link":"","permalink":"https://gngpp.github.io/2021/08/02/nginx/nginx%E9%85%8D%E7%BD%AE/","excerpt":"配置nginx反向代理服务器 直接在 /etc/nxing/nginx.conf 中配置 1234567891011121314http &#123; # 反向代理服务器 server&#123; # 配置代理服务器 listen 80; server_name http://127.0.0.1; access_log logs/server1.log main; # 目标真实服务器 localtion / &#123; proxy_pass http://127.0.0.1:8080; &#125; &#125;&#125;","categories":[{"name":"Nginx","slug":"Nginx","permalink":"https://gngpp.github.io/categories/Nginx/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://gngpp.github.io/tags/Nginx/"}]},{"title":"1.Bean的包装","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/spring_analysis/beans/1.bean的包装/","link":"","permalink":"https://gngpp.github.io/2021/08/02/spring_analysis/beans/1.bean%E7%9A%84%E5%8C%85%E8%A3%85/","excerpt":"1.前言 为什么先从对bean的包装开始阅读源码呢，因为beans包的核心就是BeanFactory 🐶，其作用就是对bean进行管理，那么对bean管理的前提就是对bean进行解析，然后支持属性的set 或 get 操作。那么我们列举一下BeanFactory的主要职责，即使没阅读过源码，也应该知道个大概过程. 解析xml或者其它配置文件得到 BeanDefinition 实例化 Instance AutoWired自动装配 Bean的依赖","categories":[{"name":"Spring-Bean","slug":"Spring-Bean","permalink":"https://gngpp.github.io/categories/Spring-Bean/"}],"tags":[{"name":"Spring-Bean","slug":"Spring-Bean","permalink":"https://gngpp.github.io/tags/Spring-Bean/"}]},{"title":"2.嵌套属性解析","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/spring_analysis/beans/2.嵌套属性解析/","link":"","permalink":"https://gngpp.github.io/2021/08/02/spring_analysis/beans/2.%E5%B5%8C%E5%A5%97%E5%B1%9E%E6%80%A7%E8%A7%A3%E6%9E%90/","excerpt":"前言 在上面的getPropertyDescriptor中用到了这个方法去解析 nested 嵌套属性，下面就来看下它怎么实现的 首先我们得明确一件事情，BeanWrapperImp 继承自 AbstractNestablePropertyAccessor 因为 BeanWrapperImp 携带有 Instance ，所以 AbstractNestablePropertyAccessor 必然也携带有 Instance ，那按照我们的思路该如何解析 nested 属性呢，比如 有一个Bean","categories":[{"name":"Spring-Bean","slug":"Spring-Bean","permalink":"https://gngpp.github.io/categories/Spring-Bean/"}],"tags":[{"name":"Spring-Bean","slug":"Spring-Bean","permalink":"https://gngpp.github.io/tags/Spring-Bean/"}]},{"title":"3.对Bean属性进行读取","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/spring_analysis/beans/3.对bean属性进行读取/","link":"","permalink":"https://gngpp.github.io/2021/08/02/spring_analysis/beans/3.%E5%AF%B9bean%E5%B1%9E%E6%80%A7%E8%BF%9B%E8%A1%8C%E8%AF%BB%E5%8F%96/","excerpt":"","categories":[{"name":"Spring-Bean","slug":"Spring-Bean","permalink":"https://gngpp.github.io/categories/Spring-Bean/"}],"tags":[{"name":"Spring-Bean","slug":"Spring-Bean","permalink":"https://gngpp.github.io/tags/Spring-Bean/"}]},{"title":"4.对Bean属性进行写入","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/spring_analysis/beans/4.对bean属性进行写入/","link":"","permalink":"https://gngpp.github.io/2021/08/02/spring_analysis/beans/4.%E5%AF%B9bean%E5%B1%9E%E6%80%A7%E8%BF%9B%E8%A1%8C%E5%86%99%E5%85%A5/","excerpt":"前言 这个和getPropertyValue 有很多相似的地方 解析嵌套属性得到 Accessor 生成 token 实际上也就是支持 集合类型 然后调用 AbstractNestablePropertyAccessor#setProperty","categories":[{"name":"Spring-Bean","slug":"Spring-Bean","permalink":"https://gngpp.github.io/categories/Spring-Bean/"}],"tags":[{"name":"Spring-Bean","slug":"Spring-Bean","permalink":"https://gngpp.github.io/tags/Spring-Bean/"}]},{"title":"5.Bean类型转换","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/spring_analysis/beans/5.类型转换/","link":"","permalink":"https://gngpp.github.io/2021/08/02/spring_analysis/beans/5.%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/","excerpt":"前言 类型转换在spring中很常用，比如说spring beans 就我们之前研究的setter/getter属性，还有spring mvc 的参数绑定，或者说是 i o c自动装配，都用到了类型转换。下面我们就单独研究它. 实际上它调用的是 org.springframework.core.convert 中的 DefaultConversionService","categories":[{"name":"Spring-Bean","slug":"Spring-Bean","permalink":"https://gngpp.github.io/categories/Spring-Bean/"}],"tags":[{"name":"Spring-Bean","slug":"Spring-Bean","permalink":"https://gngpp.github.io/tags/Spring-Bean/"}]},{"title":"6.创建BeanInstance-概览","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/spring_analysis/beans/6.创建BeanInstance-概览/","link":"","permalink":"https://gngpp.github.io/2021/08/02/spring_analysis/beans/6.%E5%88%9B%E5%BB%BABeanInstance-%E6%A6%82%E8%A7%88/","excerpt":"前言 spring 对 bean 的操作可以分为以下三个步骤： 创建 Instance 填充 Instance 初始化 Bean","categories":[{"name":"Spring-Bean","slug":"Spring-Bean","permalink":"https://gngpp.github.io/categories/Spring-Bean/"}],"tags":[{"name":"Spring-Bean","slug":"Spring-Bean","permalink":"https://gngpp.github.io/tags/Spring-Bean/"}]},{"title":"8.创建BeanInstance-根据无参构造函数","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/spring_analysis/beans/8.创建BeanInstance-根据无参构造函数/","link":"","permalink":"https://gngpp.github.io/2021/08/02/spring_analysis/beans/8.%E5%88%9B%E5%BB%BABeanInstance-%E6%A0%B9%E6%8D%AE%E6%97%A0%E5%8F%82%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/","excerpt":"前言 利用无参数构造函数创建Bean 的Instance ，这个方式比较简单。来简单看一下, 其实在上一章节已经接触过了。。 123456789101112131415161718192021protected BeanWrapper instantiateBean(final String beanName, final RootBeanDefinition mbd) &#123; try &#123; Object beanInstance; final BeanFactory parent = this; if (System.getSecurityManager() != null) &#123; beanInstance = AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; getInstantiationStrategy().instantiate(mbd, beanName, parent), getAccessControlContext()); &#125; else &#123; beanInstance = getInstantiationStrategy().instantiate(mbd, beanName, parent); &#125; BeanWrapper bw = new BeanWrapperImpl(beanInstance); initBeanWrapper(bw); return bw; &#125; catch (Throwable ex) &#123; throw new BeanCreationException( mbd.getResourceDescription(), beanName, &quot;Instantiation of bean failed&quot;, ex); &#125; &#125;","categories":[{"name":"Spring-Bean","slug":"Spring-Bean","permalink":"https://gngpp.github.io/categories/Spring-Bean/"}],"tags":[{"name":"Spring-Bean","slug":"Spring-Bean","permalink":"https://gngpp.github.io/tags/Spring-Bean/"}]},{"title":"1.Spring类型转换器服务","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/spring_analysis/core/1.类型转换服务/","link":"","permalink":"https://gngpp.github.io/2021/08/02/spring_analysis/core/1.%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E6%9C%8D%E5%8A%A1/","excerpt":"前言 sping对整个类型转换组件抽象成为service , 毕竟类型转换这些没什么神秘之处，我们只需要了解它的设计模式。老规矩，从test开始 package org.springframework.core.convert.converter#DefaultConversionServiceTests.java 123456789class DefaultConversionServiceTests &#123; private final DefaultConversionService conversionService = new DefaultConversionService(); @Test void stringToCharacter() &#123; assertThat(conversionService.convert(&quot;1&quot;, Character.class)).isEqualTo(Character.valueOf(&#x27;1&#x27;)); &#125;&#125;","categories":[{"name":"Spring-Core","slug":"Spring-Core","permalink":"https://gngpp.github.io/categories/Spring-Core/"}],"tags":[{"name":"Spring-Core","slug":"Spring-Core","permalink":"https://gngpp.github.io/tags/Spring-Core/"}]},{"title":"2.Spring转换器的管理","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/spring_analysis/core/2.转换器的管理/","link":"","permalink":"https://gngpp.github.io/2021/08/02/spring_analysis/core/2.%E8%BD%AC%E6%8D%A2%E5%99%A8%E7%9A%84%E7%AE%A1%E7%90%86/","excerpt":"前言 因为分开每一个类理解是很难理解其设计，所以需要总结，分析各个类的义务，组合起来就是整个类型转换服务的功能. 先看一张结构图。","categories":[{"name":"Spring-Core","slug":"Spring-Core","permalink":"https://gngpp.github.io/categories/Spring-Core/"}],"tags":[{"name":"Spring-Core","slug":"Spring-Core","permalink":"https://gngpp.github.io/tags/Spring-Core/"}]},{"title":"3.Spring提供的转换器","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/spring_analysis/core/3.sprint提供的转换器/","link":"","permalink":"https://gngpp.github.io/2021/08/02/spring_analysis/core/3.sprint%E6%8F%90%E4%BE%9B%E7%9A%84%E8%BD%AC%E6%8D%A2%E5%99%A8/","excerpt":"前言 GenericConversionService 的功能提供转换数据的服务, DefaultConversionService 是继承自前者的，它的责任就是注册一些基本的Converter, let me see～ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151public static void addDefaultConverters(ConverterRegistry converterRegistry) &#123; addScalarConverters(converterRegistry); addCollectionConverters(converterRegistry); // ByteBuff -&gt; byte[] // byte[] -&gt; ByteBuff converterRegistry.addConverter(new ByteBufferConverter((ConversionService) converterRegistry)); // String -&gt; TimeZone converterRegistry.addConverter(new StringToTimeZoneConverter()); // ZoneId -&gt; TimeZone converterRegistry.addConverter(new ZoneIdToTimeZoneConverter()); // DateTime -&gt; Calendar converterRegistry.addConverter(new ZonedDateTimeToCalendarConverter()); // Object -&gt; Object converterRegistry.addConverter(new ObjectToObjectConverter()); // Id -&gt; Entity converterRegistry.addConverter(new IdToEntityConverter((ConversionService) converterRegistry)); // FallBackObject -&gt; String converterRegistry.addConverter(new FallbackObjectToStringConverter()); // Object -&gt; Optional converterRegistry.addConverter(new ObjectToOptionalConverter((ConversionService) converterRegistry));&#125;/** * Add common collection converters. * @param converterRegistry the registry of converters to add to * (must also be castable to ConversionService, e.g. being a &#123;@link ConfigurableConversionService&#125;) * @throws ClassCastException if the given ConverterRegistry could not be cast to a ConversionService * @since 4.2.3 */public static void addCollectionConverters(ConverterRegistry converterRegistry) &#123; ConversionService conversionService = (ConversionService) converterRegistry; // Array -&gt; Collection converterRegistry.addConverter(new ArrayToCollectionConverter(conversionService)); // Collection -&gt; Array converterRegistry.addConverter(new CollectionToArrayConverter(conversionService)); // Array -&gt; Array converterRegistry.addConverter(new ArrayToArrayConverter(conversionService)); // Collection -&gt; Collection converterRegistry.addConverter(new CollectionToCollectionConverter(conversionService)); // Map -&gt; Map converterRegistry.addConverter(new MapToMapConverter(conversionService)); // Array -&gt; String converterRegistry.addConverter(new ArrayToStringConverter(conversionService)); // String -&gt; Array converterRegistry.addConverter(new StringToArrayConverter(conversionService)); // Array -&gt; Object converterRegistry.addConverter(new ArrayToObjectConverter(conversionService)); // Object -&gt; Array converterRegistry.addConverter(new ObjectToArrayConverter(conversionService)); // Collection -&gt; String converterRegistry.addConverter(new CollectionToStringConverter(conversionService)); // String -&gt; Collection converterRegistry.addConverter(new StringToCollectionConverter(conversionService)); // Collection -&gt; Object converterRegistry.addConverter(new CollectionToObjectConverter(conversionService)); // Object -&gt; Collection converterRegistry.addConverter(new ObjectToCollectionConverter(conversionService)); // Stream -&gt; Collection // Collection -&gt; Stream converterRegistry.addConverter(new StreamConverter(conversionService));&#125;private static void addScalarConverters(ConverterRegistry converterRegistry) &#123; // Number -&gt; Number converterRegistry.addConverterFactory(new NumberToNumberConverterFactory()); // String -&gt; Number converterRegistry.addConverterFactory(new StringToNumberConverterFactory()); // Number -&gt; String converterRegistry.addConverter(Number.class, String.class, new ObjectToStringConverter()); // String -&gt; Character converterRegistry.addConverter(new StringToCharacterConverter()); // Character -&gt; String converterRegistry.addConverter(Character.class, String.class, new ObjectToStringConverter()); // Number -&gt; Character converterRegistry.addConverter(new NumberToCharacterConverter()); // Character -&gt; Number converterRegistry.addConverterFactory(new CharacterToNumberFactory()); // String -&gt; Boolean converterRegistry.addConverter(new StringToBooleanConverter()); // Boolean -&gt; String converterRegistry.addConverter(Boolean.class, String.class, new ObjectToStringConverter()); // String -&gt; Enum converterRegistry.addConverterFactory(new StringToEnumConverterFactory()); // Enum -&gt; String converterRegistry.addConverter(new EnumToStringConverter((ConversionService) converterRegistry)); // Integer -&gt; Enum converterRegistry.addConverterFactory(new IntegerToEnumConverterFactory()); // Enum -&gt; Integer converterRegistry.addConverter(new EnumToIntegerConverter((ConversionService) converterRegistry)); // String -&gt; Local converterRegistry.addConverter(new StringToLocaleConverter()); // Local -&gt; String converterRegistry.addConverter(Locale.class, String.class, new ObjectToStringConverter()); // String -&gt; Charset converterRegistry.addConverter(new StringToCharsetConverter()); // CharSet -&gt; String converterRegistry.addConverter(Charset.class, String.class, new ObjectToStringConverter()); // String -&gt; Currency converterRegistry.addConverter(new StringToCurrencyConverter()); // Currency -&gt; String converterRegistry.addConverter(Currency.class, String.class, new ObjectToStringConverter()); // String -&gt; Properties converterRegistry.addConverter(new StringToPropertiesConverter()); // Properties -&gt; String converterRegistry.addConverter(new PropertiesToStringConverter()); // String -&gt; UUID converterRegistry.addConverter(new StringToUUIDConverter()); // UUID -&gt; String converterRegistry.addConverter(UUID.class, String.class, new ObjectToStringConverter());&#125;","categories":[{"name":"Spring-Core","slug":"Spring-Core","permalink":"https://gngpp.github.io/categories/Spring-Core/"}],"tags":[{"name":"Spring-Core","slug":"Spring-Core","permalink":"https://gngpp.github.io/tags/Spring-Core/"}]},{"title":"4.进一步分析'添加转换器","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/spring_analysis/core/4.添加转换器再详尽/","link":"","permalink":"https://gngpp.github.io/2021/08/02/spring_analysis/core/4.%E6%B7%BB%E5%8A%A0%E8%BD%AC%E6%8D%A2%E5%99%A8%E5%86%8D%E8%AF%A6%E5%B0%BD/","excerpt":"前言 本节将单个功能添加转换器拿出来再讨论 123456789public void addConverter(Converter&lt;?, ?&gt; converter) &#123; // [1] 首先获取范形的类型 [NOTE] 这个工具方法其实也蛮常用的，有兴趣可以了解下 ResolvableType[] typeInfo = getRequiredTypeInfo(converter.getClass(), Converter.class); if (typeInfo == null &amp;&amp; converter instanceof DecoratingProxy) &#123; typeInfo = getRequiredTypeInfo(((DecoratingProxy) converter).getDecoratedClass(), Converter.class); &#125; // 然后构造成 Adapter，继续跟 addConverter(new ConverterAdapter(converter, typeInfo[0], typeInfo[1])); &#125;","categories":[{"name":"Spring-Core","slug":"Spring-Core","permalink":"https://gngpp.github.io/categories/Spring-Core/"}],"tags":[{"name":"Spring-Core","slug":"Spring-Core","permalink":"https://gngpp.github.io/tags/Spring-Core/"}]},{"title":"5.Spring自定义转换器","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/spring_analysis/core/5.实现自己的转换器/","link":"","permalink":"https://gngpp.github.io/2021/08/02/spring_analysis/core/5.%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BD%AC%E6%8D%A2%E5%99%A8/","excerpt":"前言 若要实现自己的类型转换器，则需要注意一下几点. 推荐继承 ConditionalGenericConverter 也可以继承 GenericConverter 如果转换发生异常，最好抛出 ConversionFailedException 异常 最好提供ConvertiblePair 类型信息，这样就会被缓存，而不会被加入到全局转换器，到时候再一一遍历.","categories":[{"name":"Spring-Core","slug":"Spring-Core","permalink":"https://gngpp.github.io/categories/Spring-Core/"}],"tags":[{"name":"Spring-Core","slug":"Spring-Core","permalink":"https://gngpp.github.io/tags/Spring-Core/"}]},{"title":"源码级理解 BeanFactory 和 FactoryBean的区别","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/spring_analysis/interview/源码级理解 BeanFactory 和 FactoryBean的区别/","link":"","permalink":"https://gngpp.github.io/2021/08/02/spring_analysis/interview/%E6%BA%90%E7%A0%81%E7%BA%A7%E7%90%86%E8%A7%A3%20BeanFactory%20%E5%92%8C%20FactoryBean%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"1. BeanFactory BeanFactory 是一个接口，其定义了一个 容器 所具备的接口 getBean containsBean isSingleton isPrototype isTypeMatch getType","categories":[{"name":"Spring-Interview","slug":"Spring-Interview","permalink":"https://gngpp.github.io/categories/Spring-Interview/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"https://gngpp.github.io/tags/Spring/"}]},{"title":"1.factory-method 和 factory-bean的实现原理","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/spring_analysis/beans/functionality/1.factory-method和factory-bean 的实现原理/","link":"","permalink":"https://gngpp.github.io/2021/08/02/spring_analysis/beans/functionality/1.factory-method%E5%92%8Cfactory-bean%20%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/","excerpt":"##factory-method 和 factory-bean的实现 在讨论实现原理之前，得先清楚怎么用，这两个东西. 假设目前有两个类 ServiceFactory 和 Service 我们就可以指定 factory-method 和 factory-bean 给 Service","categories":[{"name":"Spring-functionality","slug":"Spring-functionality","permalink":"https://gngpp.github.io/categories/Spring-functionality/"}],"tags":[{"name":"Spring-Bean","slug":"Spring-Bean","permalink":"https://gngpp.github.io/tags/Spring-Bean/"}]},{"title":"2.注解@Qualifier和@Value的实现","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/spring_analysis/beans/functionality/2.注解@Qualifier和@Value的实现/","link":"","permalink":"https://gngpp.github.io/2021/08/02/spring_analysis/beans/functionality/2.%E6%B3%A8%E8%A7%A3@Qualifier%E5%92%8C@Value%E7%9A%84%E5%AE%9E%E7%8E%B0/","excerpt":"前言 @Qualifier用于注解在属性、方法、参数，指定用于修复依赖的 bean QualifierAnnotationAutowireCandidateResolver用于支持 @Qualifier和 @Value注解","categories":[{"name":"Spring-functionality","slug":"Spring-functionality","permalink":"https://gngpp.github.io/categories/Spring-functionality/"}],"tags":[{"name":"Spring-Bean","slug":"Spring-Bean","permalink":"https://gngpp.github.io/tags/Spring-Bean/"}]},{"title":"3.@Autowired注解实现的原理","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/spring_analysis/beans/functionality/3.@Autowired注解实现的原理/","link":"","permalink":"https://gngpp.github.io/2021/08/02/spring_analysis/beans/functionality/3.@Autowired%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%8E%9F%E7%90%86/","excerpt":"前言 @Autowired 注解的实现原理 第二小节说了，byType是根据 method 和methodParm 来装配的","categories":[{"name":"Spring-functionality","slug":"Spring-functionality","permalink":"https://gngpp.github.io/categories/Spring-functionality/"}],"tags":[{"name":"Spring-Bean","slug":"Spring-Bean","permalink":"https://gngpp.github.io/tags/Spring-Bean/"}]},{"title":"7.创建BeanInstance-根据带参构造函数","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/spring_analysis/beans/7.创建BeanInstance-根据带参构造函数/","link":"","permalink":"https://gngpp.github.io/2021/08/02/spring_analysis/beans/7.%E5%88%9B%E5%BB%BABeanInstance-%E6%A0%B9%E6%8D%AE%E5%B8%A6%E5%8F%82%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/","excerpt":"前言 在上一节讨论到 ``autowireConstructor 利用其实例化Bean，这个功能是通过调用代参构造函数来拿到Instance` 的。不多bb，开搞 12345protected BeanWrapper autowireConstructor( String beanName, RootBeanDefinition mbd, @Nullable Constructor&lt;?&gt;[] ctors, @Nullable Object[] explicitArgs) &#123; return new ConstructorResolver(this).autowireConstructor(beanName, mbd, ctors, explicitArgs); &#125;","categories":[{"name":"Spring-Bean","slug":"Spring-Bean","permalink":"https://gngpp.github.io/categories/Spring-Bean/"}],"tags":[{"name":"Spring-Bean","slug":"Spring-Bean","permalink":"https://gngpp.github.io/tags/Spring-Bean/"}]},{"title":"9.自动装配Instance","date":"2021-08-02T03:39:34.000Z","path":"2021/08/02/spring_analysis/beans/9.自动装配Instance/","link":"","permalink":"https://gngpp.github.io/2021/08/02/spring_analysis/beans/9.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8DInstance/","excerpt":"前言 我们已经完成了创建 Instance 的分析，接下来就应该是自动装配，只有装配完 Bean 才能被使用，在这里可能会看到 spring是如何解决 循环依赖的 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final @Nullable Object[] args) throws BeanCreationException &#123; /**------------------------------------------------------------------------------------------------------------ * [DESC] 负责创建Bean * [1] 如果是singleton对象，现在缓存中移除 * [2] 如果之前没有创建过singleton，则调用 &#123;@link #createBeanInstance&#125; 创建 * [3] 将单例添加到factory中，预先暴露bean，这可以支持spring去解决 singleton循环依赖问题 * [4] 调用 &#123;@link #populateBean&#125; 填充依赖属性 * [5] 调用 &#123;@link #initializeBean&#125; 初始化bean * [6] 如果Bean定义了Dependent-on 那就修复 依赖 *------------------------------------------------------------------------------------------------------------*/ // 创建出来的实例是需要包装起来，然后才能修复依赖 BeanWrapper instanceWrapper = null; // Note [1] 单例对象需要从缓存中移除 // 如果之前没有创建过，那接下来就创建实例 if (mbd.isSingleton()) &#123; instanceWrapper = this.factoryBeanInstanceCache.remove(beanName); &#125; if (instanceWrapper == null) &#123; // Note step in 创建实例 instanceWrapper = createBeanInstance(beanName, mbd, args); &#125; // 获取包装类中的实例 final Object bean = instanceWrapper.getWrappedInstance(); Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass(); if (beanType != NullBean.class) &#123; mbd.resolvedTargetType = beanType; &#125; // NOTE 调用 MergedBeanDefinitionPostProcessor 处理器 // NOTE 此时 Bean Instance 已经被创建出来 // 允许修改被合并的bean定义 // MergedBeanDefinitionPostProcessor#postProcessMergedBeanDefinition synchronized (mbd.postProcessingLock) &#123; if (!mbd.postProcessed) &#123; try &#123; applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName); &#125; catch (Throwable ex) &#123; throw new BeanCreationException(mbd.getResourceDescription(), beanName, &quot;Post-processing of merged bean definition failed&quot;, ex); &#125; mbd.postProcessed = true; &#125; &#125; // NOTICE // NOTE 这里解决单例模式下的循环依赖，就是在Singleton未初始化完毕的时候就直接将其丢进工厂 // NOTE 然后再填充依赖 // 例如：ClassA 依赖 ClassB，先new ClassA，然后放入工厂 // 然后填充 ClassA，发现依赖于ClassB 然后 new ClassB，因为ClassB依赖ClassA，并且ClassA已经被创建只是没有初始化并且存在工厂中 // 所以这时候就能从工厂拿到ClassA来填充ClassB，从而ClassB完整创建，然后填充到ClassA，这就解决了循环依赖 boolean earlySingletonExposure = (mbd.isSingleton() &amp;&amp; this.allowCircularReferences &amp;&amp; isSingletonCurrentlyInCreation(beanName)); if (earlySingletonExposure) &#123; if (logger.isTraceEnabled()) &#123; logger.trace(&quot;Eagerly caching bean &#x27;&quot; + beanName + &quot;&#x27; to allow for resolving potential circular references&quot;); &#125; // NOTE Bean未被填充，提前丢进工厂，只限于Singleton addSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean)); &#125; // Note 初始化Bean Object exposedObject = bean; try &#123; // Note 填充Bean，也就是填充BeanProperty // Note 传入的参数有Wrapper也就是包装类，用于修改属性和获取属性 // Note step in 填充Bean populateBean(beanName, mbd, instanceWrapper); // Note step in 初始化bean exposedObject = initializeBean(beanName, exposedObject, mbd); &#125; catch (Throwable ex) &#123; if (ex instanceof BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123; throw (BeanCreationException) ex; &#125; else &#123; throw new BeanCreationException( mbd.getResourceDescription(), beanName, &quot;Initialization of bean failed&quot;, ex); &#125; &#125; // Note 当单例是循环引用，且到这已经被填充完了 // Note 则注入dependent bean if (earlySingletonExposure) &#123; // 先获取一下填充完的实例 Object earlySingletonReference = getSingleton(beanName, false); if (earlySingletonReference != null) &#123; if (exposedObject == bean) &#123; exposedObject = earlySingletonReference; &#125; else if (!this.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123; // 注入dependent bean String[] dependentBeans = getDependentBeans(beanName); Set&lt;String&gt; actualDependentBeans = new LinkedHashSet&lt;&gt;(dependentBeans.length); for (String dependentBean : dependentBeans) &#123; if (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123; actualDependentBeans.add(dependentBean); &#125; &#125; if (!actualDependentBeans.isEmpty()) &#123; &#125; &#125; &#125; // Register bean as disposable. // 一次性注册Bean try &#123; registerDisposableBeanIfNecessary(beanName, bean, mbd); &#125; catch (BeanDefinitionValidationException ex) &#123; throw new BeanCreationException( mbd.getResourceDescription(), beanName, &quot;Invalid destruction signature&quot;, ex); &#125; return exposedObject; &#125;","categories":[{"name":"Spring-Bean","slug":"Spring-Bean","permalink":"https://gngpp.github.io/categories/Spring-Bean/"}],"tags":[{"name":"Spring-Bean","slug":"Spring-Bean","permalink":"https://gngpp.github.io/tags/Spring-Bean/"}]},{"title":"CRUD一些常用工具类","date":"2021-08-02T03:38:18.000Z","path":"2021/08/02/CRUD一些常用工具/","link":"","permalink":"https://gngpp.github.io/2021/08/02/CRUD%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/","excerpt":"","categories":[{"name":"skill","slug":"skill","permalink":"https://gngpp.github.io/categories/skill/"}],"tags":[{"name":"CRUD","slug":"CRUD","permalink":"https://gngpp.github.io/tags/CRUD/"}]},{"title":"MyBatis-Plus Controller模版","date":"2021-08-02T03:38:18.000Z","path":"2021/08/02/template/mybatis/controller/","link":"","permalink":"https://gngpp.github.io/2021/08/02/template/mybatis/controller/","excerpt":"","categories":[{"name":"Template","slug":"Template","permalink":"https://gngpp.github.io/categories/Template/"}],"tags":[{"name":"EasyCode","slug":"EasyCode","permalink":"https://gngpp.github.io/tags/EasyCode/"}]},{"title":"MyBatis-Plus DAO模版","date":"2021-08-02T03:38:18.000Z","path":"2021/08/02/template/mybatis/dao/","link":"","permalink":"https://gngpp.github.io/2021/08/02/template/mybatis/dao/","excerpt":"","categories":[{"name":"Template","slug":"Template","permalink":"https://gngpp.github.io/categories/Template/"}],"tags":[{"name":"EasyCode","slug":"EasyCode","permalink":"https://gngpp.github.io/tags/EasyCode/"}]},{"title":"MyBatis-Plus Entity模版","date":"2021-08-02T03:38:18.000Z","path":"2021/08/02/template/mybatis/entity/","link":"","permalink":"https://gngpp.github.io/2021/08/02/template/mybatis/entity/","excerpt":"","categories":[{"name":"Template","slug":"Template","permalink":"https://gngpp.github.io/categories/Template/"}],"tags":[{"name":"EasyCode","slug":"EasyCode","permalink":"https://gngpp.github.io/tags/EasyCode/"}]},{"title":"MyBatis-Plus Mapper模版","date":"2021-08-02T03:38:18.000Z","path":"2021/08/02/template/mybatis/mapper/","link":"","permalink":"https://gngpp.github.io/2021/08/02/template/mybatis/mapper/","excerpt":"","categories":[{"name":"Template","slug":"Template","permalink":"https://gngpp.github.io/categories/Template/"}],"tags":[{"name":"EasyCode","slug":"EasyCode","permalink":"https://gngpp.github.io/tags/EasyCode/"}]},{"title":"MyBatis-Plus Service模版","date":"2021-08-02T03:38:18.000Z","path":"2021/08/02/template/mybatis/service/","link":"","permalink":"https://gngpp.github.io/2021/08/02/template/mybatis/service/","excerpt":"","categories":[{"name":"Template","slug":"Template","permalink":"https://gngpp.github.io/categories/Template/"}],"tags":[{"name":"EasyCode","slug":"EasyCode","permalink":"https://gngpp.github.io/tags/EasyCode/"}]},{"title":"MyBatis-Plus ServiceImpl模版","date":"2021-08-02T03:38:18.000Z","path":"2021/08/02/template/mybatis/serviceImpl/","link":"","permalink":"https://gngpp.github.io/2021/08/02/template/mybatis/serviceImpl/","excerpt":"","categories":[{"name":"Template","slug":"Template","permalink":"https://gngpp.github.io/categories/Template/"}],"tags":[{"name":"EasyCode","slug":"EasyCode","permalink":"https://gngpp.github.io/tags/EasyCode/"}]},{"title":"Spring Boot使用Swagger2","date":"2021-08-02T03:34:30.000Z","path":"2021/08/02/springboot/使用Swagger2/","link":"","permalink":"https://gngpp.github.io/2021/08/02/springboot/%E4%BD%BF%E7%94%A8Swagger2/","excerpt":"1.使用Swagger2需要进行配置 (配置运行后-&gt;http://localhost:8080/swagger-ui.html) 创建配置Swagger配置类 1234567891011121314151617181920212223242526@Configuration@EnableSwagger2public class SwaggerConfig&#123; //创建bean交给spring管理 @Bean public Docket createRestApi()&#123; return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) //构建api文档的详细信息 .select() .apis(RequestHandlerSelectors.basePackage(Api.class)) //这里选择被Api注解的类 .paths(PathSelectors.any()) &#125; //构建api文档详细信息 private ApiInfo apiInfo()&#123; return new ApiInfoBuilder .title(&quot;设置文档标题&quot;) .description(&quot;设置接口描述&quot;) .contact(&quot;设置联系方式&quot;) .version(&quot;设置版本&quot;) .build(); //构建 &#125;&#125;","categories":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://gngpp.github.io/categories/Spring-Boot/"}],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://gngpp.github.io/tags/Spring-Boot/"}]},{"title":"Spring Boot数据源","date":"2021-08-02T03:33:21.000Z","path":"2021/08/02/springboot/数据源/","link":"","permalink":"https://gngpp.github.io/2021/08/02/springboot/%E6%95%B0%E6%8D%AE%E6%BA%90/","excerpt":"spring boot 配置 druid数据源 druid有许多优点，所以用druid当数据源比较合适，在网上有一个druid的自定配置项目 1https://github.com/drtrang/druid-spring-boot","categories":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://gngpp.github.io/categories/Spring-Boot/"}],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://gngpp.github.io/tags/Spring-Boot/"}]},{"title":"Spring Boot 日志配置","date":"2021-08-02T03:31:49.000Z","path":"2021/08/02/springboot/日志/","link":"","permalink":"https://gngpp.github.io/2021/08/02/springboot/%E6%97%A5%E5%BF%97/","excerpt":"spring boot 日志配置 POM文件引入依赖 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;&lt;/dependency&gt;","categories":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://gngpp.github.io/categories/Spring-Boot/"}],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://gngpp.github.io/tags/Spring-Boot/"}]},{"title":"Spring Boot配置使用","date":"2021-08-02T03:29:51.000Z","path":"2021/08/02/springboot/配置/","link":"","permalink":"https://gngpp.github.io/2021/08/02/springboot/%E9%85%8D%E7%BD%AE/","excerpt":"spring boot 外部配置 1.使用配置bean的属性 bean的定义:","categories":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://gngpp.github.io/categories/Spring-Boot/"}],"tags":[{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://gngpp.github.io/tags/Spring-Boot/"}]},{"title":"Docker快速入门","date":"2021-08-01T05:09:10.000Z","path":"2021/08/01/docker/Docker快速入门/","link":"","permalink":"https://gngpp.github.io/2021/08/01/docker/Docker%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/","excerpt":"docker笔记 docker的用处简单来说，就是将软件（mysql，redis）配置好后，将其打包成镜像，然后可以快速的部署的各个服务器，只需要配置一次即可。 1. docker 安装配置docker","categories":[{"name":"Docker","slug":"Docker","permalink":"https://gngpp.github.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://gngpp.github.io/tags/Docker/"}]},{"title":"ClassUtils","date":"2021-08-01T05:09:10.000Z","path":"2021/08/01/spring_analysis/utils/1.ClassUtils/","link":"","permalink":"https://gngpp.github.io/2021/08/01/spring_analysis/utils/1.ClassUtils/","excerpt":"","categories":[],"tags":[]},{"title":"Docker搭建Gitlab","date":"2021-07-31T03:47:39.000Z","path":"2021/07/31/CI-CD/Docker搭建Gitlab-docker搭建gitlab/","link":"","permalink":"https://gngpp.github.io/2021/07/31/CI-CD/Docker%E6%90%AD%E5%BB%BAGitlab-docker%E6%90%AD%E5%BB%BAgitlab/","excerpt":"拉取镜像 1$ docker pull gitlab/gitlab-ce:latest 运行Gitlab容器","categories":[{"name":"CI/CD","slug":"CI-CD","permalink":"https://gngpp.github.io/categories/CI-CD/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://gngpp.github.io/tags/Docker/"}]},{"title":"Docker 安装配置Spring cloud 微服务开箱即用","date":"2021-06-03T13:32:31.000Z","path":"2021/06/03/docker/Docker 安装配置Spring cloud 微服务开箱即用/","link":"","permalink":"https://gngpp.github.io/2021/06/03/docker/Docker%20%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AESpring%20cloud%20%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E7%AE%B1%E5%8D%B3%E7%94%A8/","excerpt":"Nacos 拉下镜像 1docker pull nacos/nacos-server","categories":[{"name":"Docker","slug":"Docker","permalink":"https://gngpp.github.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://gngpp.github.io/tags/Docker/"}]},{"title":"Docker 国内镜像源","date":"2021-04-05T15:14:11.000Z","path":"2021/04/05/docker/docker 国内镜像源-docker国内镜像源/","link":"","permalink":"https://gngpp.github.io/2021/04/05/docker/docker%20%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90-docker%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E6%BA%90/","excerpt":"","categories":[{"name":"Docker","slug":"Docker","permalink":"https://gngpp.github.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://gngpp.github.io/tags/Docker/"}]},{"title":"OpenJ9 优化参数以及IDEA 使用OpenJ9作为Runtime","date":"2021-03-26T12:48:20.000Z","path":"2021/03/26/config/OpenJ9 优化参数以及IDEA 使用OpenJ9作为Runtime/","link":"","permalink":"https://gngpp.github.io/2021/03/26/config/OpenJ9%20%E4%BC%98%E5%8C%96%E5%8F%82%E6%95%B0%E4%BB%A5%E5%8F%8AIDEA%20%E4%BD%BF%E7%94%A8OpenJ9%E4%BD%9C%E4%B8%BARuntime/","excerpt":"优化后叠buff 优化参数 1-XX:+UseShenandoahGC -Xshareclasses:name=(随便整个) -Xquickstart -Xscmx512M","categories":[{"name":"配置","slug":"配置","permalink":"https://gngpp.github.io/categories/%E9%85%8D%E7%BD%AE/"}],"tags":[]},{"title":"Docker配置Postgres MySQL Redis(随容器重启)","date":"2021-03-26T07:01:15.000Z","path":"2021/03/26/docker/Docker配置Postgres MySQL Redis(随容器重启)/","link":"","permalink":"https://gngpp.github.io/2021/03/26/docker/Docker%E9%85%8D%E7%BD%AEPostgres%20MySQL%20Redis(%E9%9A%8F%E5%AE%B9%E5%99%A8%E9%87%8D%E5%90%AF)/","excerpt":"MySQL 1docker run -itd --name mysql --restart=always -p 3306:3306 -e MYSQL_ROOT_PASSWORD=itcast mysql Redis","categories":[{"name":"Docker","slug":"Docker","permalink":"https://gngpp.github.io/categories/Docker/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://gngpp.github.io/tags/Docker/"}]},{"title":"Spring Gateway与服务间跨域的坑","date":"2021-03-25T12:34:08.000Z","path":"2021/03/25/记录遇到的坑/Spring Gateway与服务间跨域的坑/","link":"","permalink":"https://gngpp.github.io/2021/03/25/%E8%AE%B0%E5%BD%95%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/Spring%20Gateway%E4%B8%8E%E6%9C%8D%E5%8A%A1%E9%97%B4%E8%B7%A8%E5%9F%9F%E7%9A%84%E5%9D%91/","excerpt":"","categories":[{"name":"开发的坑","slug":"开发的坑","permalink":"https://gngpp.github.io/categories/%E5%BC%80%E5%8F%91%E7%9A%84%E5%9D%91/"}],"tags":[{"name":"Spring Gateway","slug":"Spring-Gateway","permalink":"https://gngpp.github.io/tags/Spring-Gateway/"}]},{"title":"MySQL策略备份SQL文件（逻辑备份）","date":"2021-03-18T07:47:55.000Z","path":"2021/03/18/config/MySQL策略备份/","link":"","permalink":"https://gngpp.github.io/2021/03/18/config/MySQL%E7%AD%96%E7%95%A5%E5%A4%87%E4%BB%BD/","excerpt":"笔者用的是MySQL5.7版本，如果是在macOS or Linux 配置策略文件用户名密码 123456789vim编辑文件： sudo vim /etc/my.cnf新增内容：[client]user=your_usernamepassword=your_password:wq退出终端输入：mysqldump --defaults-extra-file=/etc/my.cnf your_database &gt; /your_path 注：macOS or Linux 可以使用man page查询相关命令 如：man --defaults-extra-file","categories":[{"name":"配置","slug":"配置","permalink":"https://gngpp.github.io/categories/%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://gngpp.github.io/tags/MySQL/"}]},{"title":"MySQL修改密码","date":"2021-03-18T07:09:02.000Z","path":"2021/03/18/config/MySQL修改密码/","link":"","permalink":"https://gngpp.github.io/2021/03/18/config/MySQL%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81/","excerpt":"MySQL5.7版本 查看当前版本密码策略 123456789101112SHOW VARIABLES LIKE &#x27;validate_password%&#x27;;+--------------------------------------+--------+| Variable_name | Value |+--------------------------------------+--------+| validate_password_check_user_name | OFF || validate_password_dictionary_file | || validate_password_length | 8 || validate_password_mixed_case_count | 1 || validate_password_number_count | 1 || validate_password_policy | MEDIUM || validate_password_special_char_count | 1 |+--------------------------------------+--------+","categories":[{"name":"配置","slug":"配置","permalink":"https://gngpp.github.io/categories/%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://gngpp.github.io/tags/MySQL/"}]},{"title":"Nacos安装","date":"2021-03-12T14:39:32.000Z","path":"2021/03/12/docker/Nacos安装-nacos安装/","link":"","permalink":"https://gngpp.github.io/2021/03/12/docker/Nacos%E5%AE%89%E8%A3%85-nacos%E5%AE%89%E8%A3%85/","excerpt":"Nacos安装 服务（Service）是Nacos 世界的一等公民。Nacos支持几乎所有主流类型的“服务”的发现、配置和管理。 1.Docker安装Nacos","categories":[{"name":"Docker","slug":"Docker","permalink":"https://gngpp.github.io/categories/Docker/"}],"tags":[]},{"title":"Idea-vim 快捷键","date":"2020-05-02T11:26:50.000Z","path":"2020/05/02/vim/Idea-vim 快捷键/","link":"","permalink":"https://gngpp.github.io/2020/05/02/vim/Idea-vim%20%E5%BF%AB%E6%8D%B7%E9%94%AE/","excerpt":"IDEAVIM 常用快捷键 跳转 ctrl-] 跳转到实现 ctrl-o 返回上一次编辑地方 ctrl-i 跳到上一个跳转到的地方, 用 上面的跳回来，用这个再跳过去","categories":[{"name":"Vim","slug":"Vim","permalink":"https://gngpp.github.io/categories/Vim/"}],"tags":[{"name":"Vim","slug":"Vim","permalink":"https://gngpp.github.io/tags/Vim/"}]},{"title":"Drone-ci 入门","date":"2020-05-02T11:07:06.000Z","path":"2020/05/02/CI-CD/Drone-ci 入门/","link":"","permalink":"https://gngpp.github.io/2020/05/02/CI-CD/Drone-ci%20%E5%85%A5%E9%97%A8/","excerpt":"Drone CI 基本操作 1. Drone-Server Drone-server是整个CI的核心，drone.yml的解析以及与其它各个git平台的集成，还有UI的显示等功能. 其必须运行在docker环境下, 配置文件如下。","categories":[{"name":"CI/CD","slug":"CI-CD","permalink":"https://gngpp.github.io/categories/CI-CD/"}],"tags":[{"name":"Drone-ci","slug":"Drone-ci","permalink":"https://gngpp.github.io/tags/Drone-ci/"}]},{"title":"Gradle阿里云镜像","date":"2020-03-26T02:41:32.000Z","path":"2020/03/26/config/Gradle阿里云镜像/","link":"","permalink":"https://gngpp.github.io/2020/03/26/config/Gradle%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F/","excerpt":"","categories":[{"name":"配置","slug":"配置","permalink":"https://gngpp.github.io/categories/%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Gradle","slug":"Gradle","permalink":"https://gngpp.github.io/tags/Gradle/"}]},{"title":"Maven阿里云镜像","date":"2020-03-26T02:37:57.000Z","path":"2020/03/26/config/Maven阿里云镜像/","link":"","permalink":"https://gngpp.github.io/2020/03/26/config/Maven%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F/","excerpt":"","categories":[{"name":"配置","slug":"配置","permalink":"https://gngpp.github.io/categories/%E9%85%8D%E7%BD%AE/"}],"tags":[]}],"categories":[{"name":"PVE","slug":"PVE","permalink":"https://gngpp.github.io/categories/PVE/"},{"name":"macOS","slug":"macOS","permalink":"https://gngpp.github.io/categories/macOS/"},{"name":"配置","slug":"配置","permalink":"https://gngpp.github.io/categories/%E9%85%8D%E7%BD%AE/"},{"name":"Proxmox VE","slug":"Proxmox-VE","permalink":"https://gngpp.github.io/categories/Proxmox-VE/"},{"name":"Docker","slug":"Docker","permalink":"https://gngpp.github.io/categories/Docker/"},{"name":"CI/CD","slug":"CI-CD","permalink":"https://gngpp.github.io/categories/CI-CD/"},{"name":"开发的坑","slug":"开发的坑","permalink":"https://gngpp.github.io/categories/%E5%BC%80%E5%8F%91%E7%9A%84%E5%9D%91/"},{"name":"Hexo","slug":"Hexo","permalink":"https://gngpp.github.io/categories/Hexo/"},{"name":"CRUD","slug":"CRUD","permalink":"https://gngpp.github.io/categories/CRUD/"},{"name":"Spring Security","slug":"Spring-Security","permalink":"https://gngpp.github.io/categories/Spring-Security/"},{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"https://gngpp.github.io/categories/Elasticsearch/"},{"name":"ReentrantLock","slug":"ReentrantLock","permalink":"https://gngpp.github.io/categories/ReentrantLock/"},{"name":"Nginx","slug":"Nginx","permalink":"https://gngpp.github.io/categories/Nginx/"},{"name":"Spring-Bean","slug":"Spring-Bean","permalink":"https://gngpp.github.io/categories/Spring-Bean/"},{"name":"Spring-Core","slug":"Spring-Core","permalink":"https://gngpp.github.io/categories/Spring-Core/"},{"name":"Spring-Interview","slug":"Spring-Interview","permalink":"https://gngpp.github.io/categories/Spring-Interview/"},{"name":"Spring-functionality","slug":"Spring-functionality","permalink":"https://gngpp.github.io/categories/Spring-functionality/"},{"name":"skill","slug":"skill","permalink":"https://gngpp.github.io/categories/skill/"},{"name":"Template","slug":"Template","permalink":"https://gngpp.github.io/categories/Template/"},{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://gngpp.github.io/categories/Spring-Boot/"},{"name":"Vim","slug":"Vim","permalink":"https://gngpp.github.io/categories/Vim/"}],"tags":[{"name":"Proxmox","slug":"Proxmox","permalink":"https://gngpp.github.io/tags/Proxmox/"},{"name":"OpenWrt","slug":"OpenWrt","permalink":"https://gngpp.github.io/tags/OpenWrt/"},{"name":"R6S","slug":"R6S","permalink":"https://gngpp.github.io/tags/R6S/"},{"name":"AX201","slug":"AX201","permalink":"https://gngpp.github.io/tags/AX201/"},{"name":"Intel","slug":"Intel","permalink":"https://gngpp.github.io/tags/Intel/"},{"name":"Docker","slug":"Docker","permalink":"https://gngpp.github.io/tags/Docker/"},{"name":"OrangePi Zero2","slug":"OrangePi-Zero2","permalink":"https://gngpp.github.io/tags/OrangePi-Zero2/"},{"name":"rtl8821CU","slug":"rtl8821CU","permalink":"https://gngpp.github.io/tags/rtl8821CU/"},{"name":"macOS","slug":"macOS","permalink":"https://gngpp.github.io/tags/macOS/"},{"name":"linux","slug":"linux","permalink":"https://gngpp.github.io/tags/linux/"},{"name":"Wi-Fi","slug":"Wi-Fi","permalink":"https://gngpp.github.io/tags/Wi-Fi/"},{"name":"docker、network","slug":"docker、network","permalink":"https://gngpp.github.io/tags/docker%E3%80%81network/"},{"name":"网心云、docker","slug":"网心云、docker","permalink":"https://gngpp.github.io/tags/%E7%BD%91%E5%BF%83%E4%BA%91%E3%80%81docker/"},{"name":"烽火HG2543C1光猫","slug":"烽火HG2543C1光猫","permalink":"https://gngpp.github.io/tags/%E7%83%BD%E7%81%ABHG2543C1%E5%85%89%E7%8C%AB/"},{"name":"docker-compose","slug":"docker-compose","permalink":"https://gngpp.github.io/tags/docker-compose/"},{"name":"Gradle","slug":"Gradle","permalink":"https://gngpp.github.io/tags/Gradle/"},{"name":"配置","slug":"配置","permalink":"https://gngpp.github.io/tags/%E9%85%8D%E7%BD%AE/"},{"name":"Docker Build","slug":"Docker-Build","permalink":"https://gngpp.github.io/tags/Docker-Build/"},{"name":"Hexo","slug":"Hexo","permalink":"https://gngpp.github.io/tags/Hexo/"},{"name":"nexT","slug":"nexT","permalink":"https://gngpp.github.io/tags/nexT/"},{"name":"Linux","slug":"Linux","permalink":"https://gngpp.github.io/tags/Linux/"},{"name":"DB","slug":"DB","permalink":"https://gngpp.github.io/tags/DB/"},{"name":"Stream","slug":"Stream","permalink":"https://gngpp.github.io/tags/Stream/"},{"name":"Spring Security","slug":"Spring-Security","permalink":"https://gngpp.github.io/tags/Spring-Security/"},{"name":"Elasticsearch","slug":"Elasticsearch","permalink":"https://gngpp.github.io/tags/Elasticsearch/"},{"name":"ReentrantLock","slug":"ReentrantLock","permalink":"https://gngpp.github.io/tags/ReentrantLock/"},{"name":"Nginx","slug":"Nginx","permalink":"https://gngpp.github.io/tags/Nginx/"},{"name":"Spring-Bean","slug":"Spring-Bean","permalink":"https://gngpp.github.io/tags/Spring-Bean/"},{"name":"Spring-Core","slug":"Spring-Core","permalink":"https://gngpp.github.io/tags/Spring-Core/"},{"name":"Spring","slug":"Spring","permalink":"https://gngpp.github.io/tags/Spring/"},{"name":"CRUD","slug":"CRUD","permalink":"https://gngpp.github.io/tags/CRUD/"},{"name":"EasyCode","slug":"EasyCode","permalink":"https://gngpp.github.io/tags/EasyCode/"},{"name":"Spring Boot","slug":"Spring-Boot","permalink":"https://gngpp.github.io/tags/Spring-Boot/"},{"name":"Spring Gateway","slug":"Spring-Gateway","permalink":"https://gngpp.github.io/tags/Spring-Gateway/"},{"name":"MySQL","slug":"MySQL","permalink":"https://gngpp.github.io/tags/MySQL/"},{"name":"Vim","slug":"Vim","permalink":"https://gngpp.github.io/tags/Vim/"},{"name":"Drone-ci","slug":"Drone-ci","permalink":"https://gngpp.github.io/tags/Drone-ci/"}]}